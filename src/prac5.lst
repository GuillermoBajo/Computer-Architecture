


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos,DATA
    2 00000000         
    3 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0XFFFFF010
    4 00000000 FFFFF014 
                       VICIntEnClr
                               EQU              0XFFFFF014
    5 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
    6 00000000 FFFFF030 
                       VICVectAddr
                               EQU              0xFFFFF030
    7 00000000         
    8 00000000 E0010000 
                       R_DAT   EQU              0xE0010000  ;Registro de datos 
                                                            del teclado
    9 00000000 E0004000 
                       T0_IR   EQU              0xE0004000  ;Para bajar petició
                                                            n del Timer
   10 00000000 00000000 
                       timer_so
                               DCD              0
   11 00000004 00000000 
                       tecl_so DCD              0
   12 00000008         
   13 00000008 40007E00 
                       pantalla
                               EQU              0x40007E00  ;Comienzo carretera
                                                            
   14 00000008 40007FFF 
                       finpantalla
                               EQU              0x40007FFF  ;Fin carretera
   15 00000008 40007E1F 
                       alertsup
                               EQU              0x40007E1F  ;Para controlar lím
                                                            ites superiores
   16 00000008 77777777 
                       seed    EQU              0x77777777  ;Semilla que genera
                                                             la carretera aleat
                                                            oria
   17 00000008         
   18 00000008 20202020 
                       espacio2
                               EQU              0x20202020  ;Para limpiar panta
                                                            lla más eficienteme
                                                            nte(GAMEOVER)
   19 00000008 40007FEC 
                       coche   DCD              0x40007FEC  ;Posición inicial d
                                                            el coche
   20 0000000C 40007F0B 
                       iniGO   EQU              0x40007F0B  ;Referencia para es
                                                            cribir GAME OVER
   21 0000000C 47 41 4D 
              45 20 4F 
              56 45 52 
              21       Mensaje_GO
                               DCB              'G','A','M','E',' ','O','V','E'



ARM Macro Assembler    Page 2 


,'R','!'
   22 00000016         
   23 00000016 00 00           ALIGN
   24 00000018 00000008 
                       velocidad
                               DCD              8           ;velocidad en centé
                                                            simas
   25 0000001C 00000000 
                       cont    DCD              0           ;Contador de centés
                                                            imas de segundo
   26 00000020 00      teclaLeida
                               DCB              0           ;Guarda en mayúscul
                                                            as la última tecla 
                                                            pulsada (se resetea
                                                             tras operar con el
                                                            la)
   27 00000021 00      terminar
                               DCB              0           ;(1/0) Detecta si s
                                                            e ha de acabar el p
                                                            rograma
   28 00000022         
   29 00000022         
   30 00000022         
   31 00000022                 AREA             codigo,CODE
   32 00000000                 EXPORT           inicio      ; forma de enlazar 
                                                            con el startup.s
   33 00000000                 IMPORT           srand       ; para poder invoca
                                                            r SBR srand
   34 00000000                 IMPORT           rand        ; para poder invoca
                                                            r SBR rand
   35 00000000         inicio                               ; se recomienda pon
                                                            er punto de parada 
                                                            (breakpoint) en la 
                                                            primera
   36 00000000         ; instruccion de código para poder ejecutar todo el Star
                       tup de golpe
   37 00000000         
   38 00000000         ;Utilizamos la semilla para inicializar la secuencia de 
                       números pseudoaleatorios
   39 00000000 E59F04DC        LDR              r0, =seed
   40 00000004 E1A001A0        mov              r0, r0, LSR #3
   41 00000008 E52D0004        PUSH             {r0}
   42 0000000C EBFFFFFE        bl               srand
   43 00000010 E28DD004        add              sp,sp,#4
   44 00000014         
   45 00000014         ;Ponemos en timer_so y tecl_so la dirección que había en
                        VIC4 y VIC7 antes del cambio
   46 00000014 E59F04CC        LDR              r0, =VICVectAddr0
   47 00000018 E59F14CC        LDR              r1, =timer_so
   48 0000001C E59F24CC        LDR              r2, =tecl_so
   49 00000020 E3A03004        mov              r3, #4
   50 00000024 E7905103        ldr              r5, [r0, r3, LSL #2]
   51 00000028 E5815000        str              r5, [r1]
   52 0000002C E3A04007        mov              r4, #7
   53 00000030 E7905104        ldr              r5, [r0, r4, LSL #2]
   54 00000034 E5825000        str              r5, [r2]
   55 00000038         
   56 00000038         ;Colocamos en VIC4 y en VIC7 las direcciones de las RSIs
                       



ARM Macro Assembler    Page 3 


   57 00000038 E59F14B4        LDR              r1, =RSI_timer
   58 0000003C E7801103        str              r1, [r0, r3, LSL #2]
   59 00000040 E59F24B0        LDR              r2, =RSI_teclado
   60 00000044 E7802104        str              r2, [r0, r4, LSL #2]
   61 00000048         
   62 00000048         ;Habilitamos los bits 4 y 7 en la máscara de interrupcio
                       nes
   63 00000048 E59F24AC        LDR              r2, =VICIntEnable
   64 0000004C E3A00090        mov              r0, #2_10010000
   65 00000050 E5820000        str              r0, [r2]
   66 00000054         
   67 00000054         
   68 00000054         ********************************************************
*************************************
   69 00000054         ;Programa principal (PP):
   70 00000054         
   71 00000054         ;Dibujamos la pantalla principal
   72 00000054 E59F04A4        LDR              r0, =pantalla
   73 00000058 E52D0004        PUSH{r0}
   74 0000005C EB0000C8        bl               PANTALLA_INICIAL ;SBR que dibuj
                                                            a la pantalla y el 
                                                            coche en sus posici
                                                            ones iniciales
   75 00000060 E28DD004        add              sp, sp, #4  ;Corregimos sp
   76 00000064         
   77 00000064         ;Comprobamos si se debe terminar el programa (terminar =
                        1)
   78 00000064 E59F0498 
                       buc     LDR              r0, =terminar
   79 00000068 E5D01000        ldrb             r1, [r0]
   80 0000006C E3510001        cmp              r1, #1
   81 00000070 0A000090        beq              desact
   82 00000074         
   83 00000074         ;En función de la tecla detectada por R_DAT ejecutamos u
                       nas instrucciones u otras:
   84 00000074 E59F048C        LDR              r0, =teclaLeida
   85 00000078 E5D00000        ldrb             r0, [r0]    ;r0=Última tecla pu
                                                            lsada por el usuari
                                                            o
   86 0000007C E3500000        cmp              r0, #0      ;Si teclaLeida no t
                                                            iene ningún dato nu
                                                            evo, no actualizamo
                                                            s 
   87 00000080 0A000043        beq              detChoq     ;la velocidad ni la
                                                             posición del coche
                                                               
   88 00000084         
   89 00000084 E3500051        cmp              r0, #81     ;Compruebo si es 'Q
                                                            '
   90 00000088 1A000003        bne              noq
   91 0000008C         
   92 0000008C         ;Detecto 'Q'
   93 0000008C E59F1470        LDR              r1, =terminar
   94 00000090 E3A00001        mov              r0, #1
   95 00000094 E5C10000        strb             r0, [r1]    ;Si se ha pulsado '
                                                            Q', pongo terminar 
                                                            a 1
   96 00000098 EA00003A        b                finDet
   97 0000009C         



ARM Macro Assembler    Page 4 


   98 0000009C E59F1468 
                       noq     LDR              r1, =coche
   99 000000A0 E5911000        ldr              r1, [r1]
  100 000000A4 E1A02001        mov              r2, r1      ;Copio la posición 
                                                            anterior para borra
                                                            r coche si fuese ne
                                                            cesario
  101 000000A8         
  102 000000A8 E59F4460        LDR              r4, =alertsup
  103 000000AC E1510004        cmp              r1, r4      ;Compruebo si está 
                                                            en riesgo de excede
                                                            r el límite superio
                                                            r
  104 000000B0 BA000003        blt              sig2        ;Si lo está, ignoro
                                                             las instrucciones 
                                                            correspondientes a 
                                                            
  105 000000B4         ;la tecla 'I', por si acaso ha sido pulsada dicha tecla
  106 000000B4         ;De esta forma, evitamos que se salga de la pantalla
  107 000000B4         
  108 000000B4 E3500049        cmp              r0, #73     ;Detecto I
  109 000000B8 1A000001        bne              sig2
  110 000000BC E2411020        sub              r1, r1, #32 ;Actualizo posición
                                                             del coche
  111 000000C0 EA00000F        b                movercoche
  112 000000C4         
  113 000000C4 E59F4448 
                       sig2    LDR              r4, =finpantalla
  114 000000C8 E2444020        sub              r4, r4, #32
  115 000000CC E1510004        cmp              r1, r4      ;Compruebo si está 
                                                            en riesgo de excede
                                                            r el límite inferio
                                                            r
  116 000000D0 CA000003        bgt              sig3        ;Si lo está, ignoro
                                                             las instrucciones 
                                                            correspondientes a 
                                                            
  117 000000D4         ;la tecla 'K', por si acaso ha sido pulsada dicha tecla
  118 000000D4         ;De esta forma, evitamos que se salga de la pantalla
  119 000000D4         
  120 000000D4 E350004B        cmp              r0, #75     ;Detecto K
  121 000000D8 1A000001        bne              sig3
  122 000000DC E2811020        add              r1, r1, #32 ;Actualizo posición
                                                             del coche
  123 000000E0 EA000007        b                movercoche
  124 000000E4         
  125 000000E4 E350004A 
                       sig3    cmp              r0, #74     ;Detecto J
  126 000000E8 1A000001        bne              sig4
  127 000000EC E2411001        sub              r1, r1, #1  ;Actualizo posición
                                                             del coche
  128 000000F0 EA000003        b                movercoche
  129 000000F4         
  130 000000F4 E350004C 
                       sig4    cmp              r0, #76     ;Detecto L
  131 000000F8 1A00000F        bne              sig5
  132 000000FC E2811001        add              r1, r1, #1  ;Actualizo posición
                                                             del coche
  133 00000100 EAFFFFFF        b                movercoche



ARM Macro Assembler    Page 5 


  134 00000104         
  135 00000104         movercoche
  136 00000104 E5D14000        ldrb             r4, [r1]    ;Detecto si ha choc
                                                            ado
  137 00000108 E3540023        cmp              r4, #35
  138 0000010C 1A000003        bne              nochoq
  139 00000110 E3A04001        mov              r4, #1      ;Si ha chocado, pon
                                                            go la variable 'ter
                                                            minar' a 1
  140 00000114 E59F33E8        LDR              r3, =terminar
  141 00000118 E5C34000        strb             r4, [r3]    ;Guardo terminar = 
                                                            1
  142 0000011C EA000019        b                finDet
  143 00000120         
  144 00000120         ;Si no ha chocado:
  145 00000120 E3A03048 
                       nochoq  mov              r3, #72     ;'H'
  146 00000124 E5C13000        strb             r3, [r1]    ;Muevo el coche
  147 00000128 E59F03DC        LDR              r0, =coche
  148 0000012C E5801000        str              r1, [r0]    ;Actualizo posición
                                                            
  149 00000130 E3A01020        mov              r1, #32
  150 00000134 E5C21000        strb             r1, [r2]    ;Borro el coche de 
                                                            su posición anterio
                                                            r
  151 00000138 EA000012        b                finDet
  152 0000013C         
  153 0000013C E59F13D4 
                       sig5    LDR              r1, =velocidad
  154 00000140 E5912000        ldr              r2, [r1]    ;r2=velocidad
  155 00000144 E59F33D0        LDR              r3, =cont   ;r3=@cont
  156 00000148         
  157 00000148 E350000B        cmp              r0, #11     ;Detecto '+'
  158 0000014C 1A000004        bne              sig6
  159 00000150 E1A020A2        mov              r2, r2, LSR #1 ;Multiplico x2 v
                                                            elocidad
  160 00000154         
  161 00000154 E3A04001        mov              r4,#1       ;Control límites vm
                                                            ax
  162 00000158 E1520004        cmp              r2, r4
  163 0000015C 93A02001        movls            r2,#1
  164 00000160 EA000005        b                actV
  165 00000164         
  166 00000164 E350000D 
                       sig6    cmp              r0, #13     ;Detecto '-'
  167 00000168 1A000006        bne              finDet
  168 0000016C E1A02082        mov              r2, r2, LSL #1 ;Divido x2 veloc
                                                            idad
  169 00000170         
  170 00000170 E3A04080        mov              r4,#128     ;Control límites vm
                                                            in
  171 00000174 E1520004        cmp              r2, r4
  172 00000178 A3A02080        movge            r2,#128
  173 0000017C         
  174 0000017C E5812000 
                       actV    str              r2, [r1]    ;Actualizo velocida
                                                            d
  175 00000180 E3A02000        mov              r2, #0
  176 00000184 E5832000        str              r2, [r3]    ;Reseteo cont



ARM Macro Assembler    Page 6 


  177 00000188         
  178 00000188 E59F0378 
                       finDet  LDR              r0, =teclaLeida ;Reseteamos dat
                                                            oLeido
  179 0000018C E3A01000        mov              r1, #0
  180 00000190 E5C01000        strb             r1, [r0]
  181 00000194         
  182 00000194         
  183 00000194         ;El coche puede chocarse debido a un mal movimiento del 
                       jugador o a que al mover 
  184 00000194         ;la carretera, esta se ha colocado donde estaba el coche
                       . Detectaremos ambos casos:
  185 00000194         
  186 00000194         detChoq                              ;Compruebo si al mo
                                                            ver la carretera se
                                                             ha chocado solo
  187 00000194 E59F1370        LDR              r1, =coche
  188 00000198 E5911000        ldr              r1, [r1]    ;r1=posicion del co
                                                            che
  189 0000019C E5D12000        ldrb             r2, [r1]    ;Contenido de la po
                                                            sición del coche
  190 000001A0 E59F135C        LDR              r1, =terminar ;r1=@terminar
  191 000001A4 E3520023        cmp              r2, #35     ;Comparo el conteni
                                                            do de la posición c
                                                            on '#'
  192 000001A8 0A000002        beq              escTer
  193 000001AC         
  194 000001AC         ;Comprobamos si el coche ha chocado al ser movido
  195 000001AC E5D12000 
                       malMov  ldrb             r2, [r1]
  196 000001B0 E3520001        cmp              r2, #1      ;Compruebo si hemos
                                                             detectado choque a
                                                            l mover el coche
  197 000001B4 1A000004        bne              actualizar_carretera
  198 000001B8         
  199 000001B8         ;Si ha chocado:
  200 000001B8 E3A00001 
                       escTer  mov              r0, #1
  201 000001BC E5C10000        strb             r0, [r1]    ;Pongo la variable 
                                                            'terminar' a 1
  202 000001C0         
  203 000001C0         ;Limpiamos la pantalla
  204 000001C0 EB00008F        bl               LIMPIARPANTALLA ;SBR que limpia
                                                             toda la pantalla
  205 000001C4         
  206 000001C4 EB00009B        bl               GAMEOVER    ;SBR que escribe 'G
                                                            AME OVER!' en panta
                                                            lla
  207 000001C8 EAFFFFA5        b                buc         ;Volvemos al princi
                                                            pio del bucle para 
                                                            definir que el prog
                                                            rama ha terminado
  208 000001CC         
  209 000001CC         ;Si no ha chocado, actualizamos la carretera
  210 000001CC         actualizar_carretera
  211 000001CC         ;Primero comprobamos si cont=velocidad
  212 000001CC E59F0348        LDR              r0, =cont
  213 000001D0 E5902000        ldr              r2, [r0]    ;r2=cont
  214 000001D4 E59F133C        LDR              r1, =velocidad



ARM Macro Assembler    Page 7 


  215 000001D8 E5911000        ldr              r1, [r1]    ;r1=velocidad
  216 000001DC E1520001        cmp              r2, r1      ;Comprobamos si el 
                                                            contador indica act
                                                            ualización necesari
                                                            a
  217 000001E0 1AFFFF9F        bne              buc         ;Sino, volvemos al 
                                                            principio del bucle
                                                            
  218 000001E4 E3A02000        mov              r2, #0
  219 000001E8 E5C02000        strb             r2, [r0]    ;Reseteamos cont
  220 000001EC         
  221 000001EC         ;Bajamos carretera
  222 000001EC EB0000A0        bl               BAJAR_CARRETERA ;SBR que baja l
                                                            a carretera fila a 
                                                            fila (la baja 1 sol
                                                            a fila en cada llam
                                                            ada)  
  223 000001F0         
  224 000001F0         ;Generamos carretera aleatoria
  225 000001F0         
  226 000001F0         ;Primero, detectamos la posición de la carretera en su ú
                       ltimo estado
  227 000001F0 E59F0308        LDR              r0, =pantalla
  228 000001F4 E2800020        add              r0, r0, #32 ;Comprobamos la seg
                                                            unda fila ya que la
                                                             primera 
  229 000001F8 E3A05023        mov              r5, #35     ;aún no ha sido col
                                                            ocada
  230 000001FC E3A03020        mov              r3, #32     ;Número de iteracio
                                                            nes
  231 00000200         
  232 00000200 E5D02000 
                       buscCar ldrb             r2, [r0]    ;r2=Contenido de la
                                                             posición de memori
                                                            a leída
  233 00000204 E1520005        cmp              r2, r5      ;Si es igual a '#':
                                                            
  234 00000208 E1A04000        mov              r4, r0      ;Guardamos la posic
                                                            ión
  235 0000020C 0A000002        beq              aleat       ;Saltamos a los pro
                                                            cedimientos aleator
                                                            ios
  236 00000210 E2800001 
                       incrind add              r0, r0, #1  ;Sino, sigo comprob
                                                            ando hasta encontra
                                                            r la carretera
  237 00000214 E2533001        subs             r3, r3, #1
  238 00000218 1AFFFFF8        bne              buscCar
  239 0000021C         
  240 0000021C         
  241 0000021C E24DD004 
                       aleat   sub              sp, sp, #4
  242 00000220 EBFFFFFE        bl               rand        ;Llamamos a la subr
                                                            utina rand que nos 
                                                            devolverá por pila 
                                                            
  243 00000224 E49D0004        POP{r0}                      ;un número aleatori
                                                            o
  244 00000228         



ARM Macro Assembler    Page 8 


  245 00000228 E1A00CA0        mov              r0, r0, LSR #25 ;No utilizaremo
                                                            s los bits de menos
                                                             significancia ya q
                                                            ue cuanto
  246 0000022C         ;menores sean los bits analizado, los resultados serán m
                       enos aleatorios
  247 0000022C E2000003        and              r0, r0, #3  ;Selecciono 3 bits 
                                                            y borro el resto
  248 00000230 E1A01000        mov              r1, r0      ;Guardo el número r
                                                            esultante
  249 00000234 E1A000A0        mov              r0, r0, LSR #1 ;Cojo [1] de r0
  250 00000238         
  251 00000238 E3A02001        mov              r2, #1
  252 0000023C E1500002        cmp              r0, r2      ;Si [1]=1, -> recto
                                                            
  253 00000240 0A000018        beq              recto
  254 00000244         
  255 00000244 E2011001        and              r1, r1, #1
  256 00000248 E1510002        cmp              r1, r2      ;Sino, si [0]=1 -> 
                                                            derecha. Se moverá 
                                                            a la izquierda en c
                                                            aso contrario
  257 0000024C 0A00000A        beq              der
  258 00000250         
  259 00000250         ;Mover a la izquierda
  260 00000250 E2444021        sub              r4, r4, #33 ;Corregimos: r4('#'
                                                             detectado) - 32(pa
                                                            samos a la 1ª fila)
                                                             -1(movemos 1 a la 
                                                            izq)
  261 00000254 E59F22C4        LDR              r2, =0X40007E03
  262 00000258 E1540002        cmp              r4, r2      ;Compruebo si hay r
                                                            iesgo de exceder lo
                                                            s límites
  263 0000025C DA000002        ble              corrizq     ;Si lo hay, salto a
                                                             la corrección
  264 00000260 E5C45000        strb             r5, [r4]    ;Sino, dibujo el lí
                                                            mite izquierdo de l
                                                            a carretera
  265 00000264 E5C45008        strb             r5, [r4, #8] ;Límite derecho de
                                                             la carretera
  266 00000268 EA000011        b                yaConstruida
  267 0000026C         
  268 0000026C E2844002 
                       corrizq add              r4, r4, #2  ;Corrijo la posició
                                                            n
  269 00000270 E5C45000        strb             r5, [r4]    ;Dibujo la carreter
                                                            a
  270 00000274 E5C45008        strb             r5, [r4, #8]
  271 00000278 EA00000D        b                yaConstruida
  272 0000027C         
  273 0000027C         
  274 0000027C E244401F 
                       der     sub              r4, r4, #31 ;Corregimos: r4('#'
                                                             detectado) - 32(pa
                                                            samos a la 1ª fila)
                                                             +1(movemos 1 a la 
                                                            der)
  275 00000280 E59F229C        LDR              r2, =0X40007E14



ARM Macro Assembler    Page 9 


  276 00000284 E1540002        cmp              r4,r2       ;Compruebo si hay r
                                                            iesgo de exceder lo
                                                            s límites
  277 00000288 AA000002        bge              corrder     ;Si lo hay, salto a
                                                             la corrección
  278 0000028C E5C45000        strb             r5, [r4]    ;Sino, dibujo el lí
                                                            mite izquierdo de l
                                                            a carretera
  279 00000290 E5C45008        strb             r5, [r4, #8] ;Límite derecho de
                                                             la carretera
  280 00000294 EA000006        b                yaConstruida
  281 00000298         
  282 00000298 E2444002 
                       corrder sub              r4, r4, #2  ;Corrijo la posició
                                                            n
  283 0000029C E5C45000        strb             r5, [r4]    ;Dibujo la carreter
                                                            a
  284 000002A0 E5C45008        strb             r5, [r4, #8]
  285 000002A4 EA000002        b                yaConstruida
  286 000002A8         
  287 000002A8         
  288 000002A8 E2444020 
                       recto   sub              r4, r4, #32 ;Si se sigue recto,
                                                             no hay que desplaz
                                                            ar la carretera ni 
                                                            comprobar límites
  289 000002AC E5C45000        strb             r5, [r4]    ;Dibujo la carreter
                                                            a
  290 000002B0 E5C45008        strb             r5, [r4, #8]
  291 000002B4         
  292 000002B4         yaConstruida
  293 000002B4 EAFFFF6A        b                buc
  294 000002B8         
  295 000002B8         ********************************************************
*************************************
  296 000002B8         ;Restauración del sistema de E/S:
  297 000002B8         
  298 000002B8         ;Deshabilitamos los bits 4 y 7 en la máscara de interrup
                       ciones
  299 000002B8 E59F0268 
                       desact  LDR              r0, =VICIntEnClr
  300 000002BC E3A01090        mov              r1, #2_10010000
  301 000002C0 E5801000        str              r1, [r0]
  302 000002C4         
  303 000002C4         ;Recuperamos las direcciones originales que se guardaban
                        en VIC 4 y VIC7
  304 000002C4 E59F021C        LDR              r0, =VICVectAddr0
  305 000002C8 E59F121C        LDR              r1, =timer_so
  306 000002CC E5911000        ldr              r1, [r1]
  307 000002D0 E59F2218        LDR              r2, =tecl_so
  308 000002D4 E5922000        ldr              r2, [r2]
  309 000002D8 E3A03004        mov              r3, #4
  310 000002DC E7801103        str              r1, [r0, r3, LSL #2]
  311 000002E0 E3A03007        mov              r3, #7
  312 000002E4 E7802103        str              r2, [r0, r3, LSL #2]
  313 000002E8         
  314 000002E8 EAFFFFFE 
                       fin     b                fin
  315 000002EC         



ARM Macro Assembler    Page 10 


  316 000002EC         ********************************************************
*************************************
  317 000002EC         ;Rutinas de Servicio de Interrupciones (RSI):
  318 000002EC         
  319 000002EC         RSI_timer                            ; Le llega una inte
                                                            rrupción cada 0,01s
                                                            eg
  320 000002EC         
  321 000002EC         ;Prólogo
  322 000002EC E24EE004        sub              lr,lr, #4
  323 000002F0 E52DE004        PUSH{lr}                     ;Apilar @retorno_pp
                                                            
  324 000002F4 E14FE000        mrs              r14, spsr
  325 000002F8 E52DE004        PUSH{r14}                    ;Apilar cpsr_pp
  326 000002FC E321F052        msr              cpsr_c, #2_01010010 ;Activar in
                                                            terrupciones IRQ
  327 00000300         
  328 00000300 E92D0003        PUSH{r0,         r1}         ;Apilo registros a 
                                                            utilizar
  329 00000304         
  330 00000304         ;Bajamos petición (escribiendo un 1 en el T0_IR)
  331 00000304 E59F0220        LDR              r0, =T0_IR
  332 00000308 E3A01001        mov              r1, #1
  333 0000030C E5801000        str              r1, [r0]
  334 00000310         
  335 00000310         ;cont = cont+1
  336 00000310 E59F0204        LDR              r0, =cont   ;r0=@cont
  337 00000314 E5901000        ldr              r1, [r0]    ;r1=cont
  338 00000318 E2811001        add              r1, r1, #1
  339 0000031C E5801000        str              r1, [r0]
  340 00000320         
  341 00000320 E8BD0003        POP{r0,          r1}         ;Desapilo registros
                                                             utilizados
  342 00000324         
  343 00000324         ;Epílogo
  344 00000324 E321F0D2        msr              cpsr_c, #2_11010010 ;Desactivar
                                                             interrupciones IRQ
                                                            
  345 00000328 E49DE004        POP{r14}                     ;r14=cpsr_pp
  346 0000032C E16FF00E        msr              spsr_fsxc, r14 ;spsr=cpsr_pp
  347 00000330 E59FE1F8        LDR              r14, =VICVectAddr ;EOI
  348 00000334 E58EE000        str              r14, [r14]
  349 00000338 E8FD8000        POP{pc}^                     ;pc=@ret_pp y cpsr=
                                                            spsr=cpsr_pp
  350 0000033C         
  351 0000033C         RSI_teclado
  352 0000033C         
  353 0000033C         ;Prólogo
  354 0000033C E24EE004        sub              lr,lr, #4
  355 00000340 E52DE004        PUSH{lr}                     ;Apilar @retorno_pp
                                                            
  356 00000344 E14FE000        mrs              r14, spsr
  357 00000348 E52DE004        PUSH{r14}                    ;Apilar cpsr_pp
  358 0000034C E321F052        msr              cpsr_c, #2_01010010 ;Activar in
                                                            terrupciones IRQ
  359 00000350         
  360 00000350 E92D0003        PUSH{r0-r1}                  ;Apilo registros a 
                                                            utilizar
  361 00000354         



ARM Macro Assembler    Page 11 


  362 00000354         ;Transferencia
  363 00000354 E59F11D8        LDR              r1, =R_DAT
  364 00000358 E5D10000        ldrb             r0, [r1]
  365 0000035C         
  366 0000035C         ;Paso a mayúsculas y almaceno lo leído para tratarlo en 
                       el PP
  367 0000035C E3C00020        bic              r0, r0, #2_100000
  368 00000360 E59F11A0        LDR              r1, =teclaLeida
  369 00000364 E5C10000        strb             r0, [r1]
  370 00000368         
  371 00000368 E8BD0003        POP{r0-r1}                   ;Desapilo registros
                                                             utilizados
  372 0000036C         
  373 0000036C         ;Epílogo
  374 0000036C E321F0D2        msr              cpsr_c, #2_11010010 ;Desactivar
                                                             interrupciones IRQ
                                                            
  375 00000370 E49DE004        POP{r14}                     ;r14=cpsr_pp
  376 00000374 E16FF00E        msr              spsr_fsxc, r14 ;spsr=cpsr_pp
  377 00000378 E59FE1B0        LDR              r14, =VICVectAddr ;EOI
  378 0000037C E58EE000        str              r14, [r14]
  379 00000380 E8FD8000        POP{pc}^                     ;pc=@ret_pp y cpsr=
                                                            spsr=cpsr_pp
  380 00000384         
  381 00000384         ********************************************************
*************************************
  382 00000384         ;Subrutinas:
  383 00000384         
  384 00000384         PANTALLA_INICIAL
  385 00000384 E52DE004        PUSH{lr}
  386 00000388 E52DB004        PUSH{r11}
  387 0000038C E1A0B00D        mov              fp, sp
  388 00000390         
  389 00000390 E92D001F        PUSH{r0-r4}                  ;Apilo registros a 
                                                            utilizar
  390 00000394         
  391 00000394 E59B0008        ldr              r0, [fp, #8] ;r0=@pantalla
  392 00000398 E0211001        eor              r1, r1, r1  ;r1=i
  393 0000039C E0222002        eor              r2, r2, r2  ;r2=j
  394 000003A0 E3A03020        mov              r3, #32     ;r3=' '
  395 000003A4 E3A04023        mov              r4, #35     ;r4='#'
  396 000003A8         
  397 000003A8 E3510010 
                       buc1    cmp              r1, #16
  398 000003AC AA00000D        bge              escCoch
  399 000003B0         
  400 000003B0 E3520020 
                       buc2    cmp              r2, #32
  401 000003B4 AA000008        bge              incri
  402 000003B8         
  403 000003B8 E3520008        cmp              r2, #8      ;Si columna=8, salt
                                                            o a escribir almoha
                                                            dilla
  404 000003BC 0A000003        beq              escAlm
  405 000003C0 E3520010        cmp              r2, #16     ;Sino, si columna=1
                                                            6, salto a escribir
                                                             almohadilla
  406 000003C4 0A000001        beq              escAlm
  407 000003C8 E4C03001        strb             r3, [r0], #1 ;Sino, escribo esp



ARM Macro Assembler    Page 12 


                                                            acio
  408 000003CC EA000000        b                incrj
  409 000003D0         
  410 000003D0 E4C04001 
                       escAlm  strb             r4, [r0], #1 ;Escribo almohadil
                                                            la
  411 000003D4 E2822001 
                       incrj   add              r2, r2, #1  ;Incremento j
  412 000003D8 EAFFFFF4        b                buc2
  413 000003DC         
  414 000003DC E3A02000 
                       incri   mov              r2, #0      ;Reinicio j
  415 000003E0 E2811001        add              r1, r1, #1  ;Incremento i
  416 000003E4 EAFFFFEF        b                buc1
  417 000003E8         
  418 000003E8         ;Dibujamos el coche en su posición inicial
  419 000003E8 E59F111C 
                       escCoch LDR              r1, =coche
  420 000003EC E5911000        ldr              r1, [r1]
  421 000003F0 E3A00048        mov              r0, #72
  422 000003F4 E5C10000        strb             r0, [r1]
  423 000003F8         
  424 000003F8 E8BD001F        POP{r0-r4}                   ;Desapilo registros
                                                             utilizados
  425 000003FC         
  426 000003FC E49DB004        POP{r11}
  427 00000400 E49DF004        POP{pc}
  428 00000404         
  429 00000404         
  430 00000404         LIMPIARPANTALLA
  431 00000404 E52DE004        PUSH{lr}
  432 00000408 E52DB004        PUSH{r11}
  433 0000040C E1A0B00D        mov              fp, sp
  434 00000410         
  435 00000410 E92D0007        PUSH{r0-r2}                  ;Apilo registros a 
                                                            utilizar
  436 00000414 E59F00E4        LDR              r0, =pantalla
  437 00000418 E59F1118        LDR              r1, =espacio2
  438 0000041C E3A02080        mov              r2, #128    ;Número de iteracio
                                                            nes 
  439 00000420         
  440 00000420 E4801004 
                       buclimp str              r1, [r0], #4 ; Escribimos ' ' e
                                                            n toda la pantalla
  441 00000424 E2522001        subs             r2, r2, #1
  442 00000428 1AFFFFFC        bne              buclimp
  443 0000042C         
  444 0000042C E8BD0007        POP{r0-r2}                   ;Desapilo registros
                                                             utilizados
  445 00000430         
  446 00000430 E49DB004        POP{r11}
  447 00000434 E49DF004        POP{pc}
  448 00000438         
  449 00000438         
  450 00000438         GAMEOVER
  451 00000438 E52DE004        PUSH{lr}
  452 0000043C E52DB004        PUSH{r11}
  453 00000440 E1A0B00D        mov              fp, sp
  454 00000444         



ARM Macro Assembler    Page 13 


  455 00000444 E92D000F        PUSH{r0-r3}                  ;Apilo registros a 
                                                            utilizar
  456 00000448         
  457 00000448 E59F00EC        LDR              r0, =Mensaje_GO ;r0=@mensaje
  458 0000044C E59F10EC        LDR              r1, =iniGO  ;r1=@donde_escribir
                                                            _el_mensaje
  459 00000450 E3A02000        mov              r2, #0      ;r2=i
  460 00000454         
  461 00000454 E7D03002 
                       bucGO   ldrb             r3, [r0, r2] ;r3=Carácter a esc
                                                            ribir    
  462 00000458 E7C13002        strb             r3, [r1, r2] ;Escribimos el car
                                                            ácter
  463 0000045C E2822001        add              r2, r2, #1  ;Incremento i      
                                                            
  464 00000460 E352000A        cmp              r2, #10
  465 00000464 BAFFFFFA        blt              bucGO
  466 00000468         
  467 00000468 E8BD000F        POP{r0-r3}                   ;Desapilo registros
                                                             utilizados
  468 0000046C         
  469 0000046C E49DB004        POP{r11}
  470 00000470 E49DF004        POP{pc}
  471 00000474         
  472 00000474         
  473 00000474         BAJAR_CARRETERA
  474 00000474 E52DE004        PUSH{lr}
  475 00000478 E52DB004        PUSH{r11}
  476 0000047C E1A0B00D        mov              fp, sp
  477 00000480         
  478 00000480 E92D003F        PUSH{r0-r5}                  ;Apilo registros a 
                                                            utilizar
  479 00000484         
  480 00000484 E59F0088        LDR              r0, =finpantalla ;Posición a pa
                                                            rtir de la que empe
                                                            zaremos a bajar la 
                                                            carretera
  481 00000488 E59F2070        LDR              r2, =pantalla
  482 0000048C E2422001        sub              r2, r2, #1  ;r2=@pantalla (posi
                                                            ción anterior a la 
                                                            primera)
  483 00000490 E3A01023        mov              r1, #35     ;r1='#'
  484 00000494 E3A03020        mov              r3, #32     ;r3=' '
  485 00000498         
  486 00000498         ;Primero, borramos la carretera de la última fila
  487 00000498 E3A04020        mov              r4, #32     ;r4=Número de itera
                                                            ciones
  488 0000049C E5D05000 
                       limpUlt ldrb             r5, [r0]    ;r5=Contenido de po
                                                            sición a comprobar 
                                                            (comprobar si es '#
                                                            ' o no)
  489 000004A0 E1510005        cmp              r1 ,r5
  490 000004A4 1A000000        bne              incrLU
  491 000004A8 E5C03000        strb             r3, [r0]    ;Si en la posición 
                                                            indicada hay un '#'
                                                            , la limpiamos
  492 000004AC         
  493 000004AC E2400001 



ARM Macro Assembler    Page 14 


                       incrLU  sub              r0, r0, #1  ;Actualizamos r0 (q
                                                            ue recorre toda la 
                                                            última fila)
  494 000004B0 E2544001        subs             r4, r4, #1  ;Restamos 1 iteraci
                                                            ón
  495 000004B4 1AFFFFF8        bne              limpUlt
  496 000004B8         
  497 000004B8         
  498 000004B8         ;Una vez limpiada la última fila, procedemos a bajar el 
                       resto de filas una posición
  499 000004B8         ;La fila de arriba del todo
  500 000004B8 E5D04000 
                       Baj     ldrb             r4, [r0]    ;r4=@ a comprobar
  501 000004BC E1540001        cmp              r4, r1
  502 000004C0 1A000001        bne              incrBaj
  503 000004C4 E5C03000        strb             r3, [r0]    ;Si en la posición 
                                                            indicada hay un '#'
                                                            , la limpiamos
  504 000004C8 E5C01020        strb             r1, [r0, #32] ;Escribimos el '#
                                                            ' en la siguiente f
                                                            ila (misma columna)
                                                            
  505 000004CC         
  506 000004CC E2400001 
                       incrBaj sub              r0, r0, #1  ;Actualizamos r0 (q
                                                            ue recorre la panta
                                                            lla)
  507 000004D0 E1500002        cmp              r0, r2      ;Comprobamos si r0 
                                                            = última posición a
                                                             comprobar
  508 000004D4 AAFFFFF7        bge              Baj
  509 000004D8         
  510 000004D8 E8BD003F        POP{r0-r5}                   ;Desapilo registros
                                                             utilizados
  511 000004DC         
  512 000004DC E49DB004        POP{r11}
  513 000004E0 E49DF004        POP{pc}
  514 000004E4         
  515 000004E4                 END
              77777777 
              FFFFF100 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF010 
              40007E00 
              00000000 
              00000000 
              00000000 
              40007E1F 
              40007FFF 
              00000000 
              00000000 
              40007E03 
              40007E14 
              FFFFF014 
              E0004000 
              FFFFF030 



ARM Macro Assembler    Page 15 


              E0010000 
              20202020 
              00000000 
              40007F0B 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\p
rac5.d -o.\prac5.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC
:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__UVISION_VE
RSION SETA 526" --list=.\prac5.lst prac5.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Mensaje_GO 0000000C

Symbol: Mensaje_GO
   Definitions
      At line 21 in file prac5.s
   Uses
      At line 457 in file prac5.s
Comment: Mensaje_GO used once
coche 00000008

Symbol: coche
   Definitions
      At line 19 in file prac5.s
   Uses
      At line 98 in file prac5.s
      At line 147 in file prac5.s
      At line 187 in file prac5.s
      At line 419 in file prac5.s

cont 0000001C

Symbol: cont
   Definitions
      At line 25 in file prac5.s
   Uses
      At line 155 in file prac5.s
      At line 212 in file prac5.s
      At line 336 in file prac5.s

datos 00000000

Symbol: datos
   Definitions
      At line 1 in file prac5.s
   Uses
      None
Comment: datos unused
tecl_so 00000004

Symbol: tecl_so
   Definitions
      At line 11 in file prac5.s
   Uses
      At line 48 in file prac5.s
      At line 307 in file prac5.s

teclaLeida 00000020

Symbol: teclaLeida
   Definitions
      At line 26 in file prac5.s
   Uses
      At line 84 in file prac5.s
      At line 178 in file prac5.s
      At line 368 in file prac5.s

terminar 00000021

Symbol: terminar



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 27 in file prac5.s
   Uses
      At line 78 in file prac5.s
      At line 93 in file prac5.s
      At line 140 in file prac5.s
      At line 190 in file prac5.s

timer_so 00000000

Symbol: timer_so
   Definitions
      At line 10 in file prac5.s
   Uses
      At line 47 in file prac5.s
      At line 305 in file prac5.s

velocidad 00000018

Symbol: velocidad
   Definitions
      At line 24 in file prac5.s
   Uses
      At line 153 in file prac5.s
      At line 214 in file prac5.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BAJAR_CARRETERA 00000474

Symbol: BAJAR_CARRETERA
   Definitions
      At line 473 in file prac5.s
   Uses
      At line 222 in file prac5.s
Comment: BAJAR_CARRETERA used once
Baj 000004B8

Symbol: Baj
   Definitions
      At line 500 in file prac5.s
   Uses
      At line 508 in file prac5.s
Comment: Baj used once
GAMEOVER 00000438

Symbol: GAMEOVER
   Definitions
      At line 450 in file prac5.s
   Uses
      At line 206 in file prac5.s
Comment: GAMEOVER used once
LIMPIARPANTALLA 00000404

Symbol: LIMPIARPANTALLA
   Definitions
      At line 430 in file prac5.s
   Uses
      At line 204 in file prac5.s
Comment: LIMPIARPANTALLA used once
PANTALLA_INICIAL 00000384

Symbol: PANTALLA_INICIAL
   Definitions
      At line 384 in file prac5.s
   Uses
      At line 74 in file prac5.s
Comment: PANTALLA_INICIAL used once
RSI_teclado 0000033C

Symbol: RSI_teclado
   Definitions
      At line 351 in file prac5.s
   Uses
      At line 59 in file prac5.s
Comment: RSI_teclado used once
RSI_timer 000002EC

Symbol: RSI_timer
   Definitions
      At line 319 in file prac5.s
   Uses
      At line 57 in file prac5.s
Comment: RSI_timer used once
actV 0000017C

Symbol: actV



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 174 in file prac5.s
   Uses
      At line 164 in file prac5.s
Comment: actV used once
actualizar_carretera 000001CC

Symbol: actualizar_carretera
   Definitions
      At line 210 in file prac5.s
   Uses
      At line 197 in file prac5.s
Comment: actualizar_carretera used once
aleat 0000021C

Symbol: aleat
   Definitions
      At line 241 in file prac5.s
   Uses
      At line 235 in file prac5.s
Comment: aleat used once
buc 00000064

Symbol: buc
   Definitions
      At line 78 in file prac5.s
   Uses
      At line 207 in file prac5.s
      At line 217 in file prac5.s
      At line 293 in file prac5.s

buc1 000003A8

Symbol: buc1
   Definitions
      At line 397 in file prac5.s
   Uses
      At line 416 in file prac5.s
Comment: buc1 used once
buc2 000003B0

Symbol: buc2
   Definitions
      At line 400 in file prac5.s
   Uses
      At line 412 in file prac5.s
Comment: buc2 used once
bucGO 00000454

Symbol: bucGO
   Definitions
      At line 461 in file prac5.s
   Uses
      At line 465 in file prac5.s
Comment: bucGO used once
buclimp 00000420

Symbol: buclimp
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 440 in file prac5.s
   Uses
      At line 442 in file prac5.s
Comment: buclimp used once
buscCar 00000200

Symbol: buscCar
   Definitions
      At line 232 in file prac5.s
   Uses
      At line 238 in file prac5.s
Comment: buscCar used once
codigo 00000000

Symbol: codigo
   Definitions
      At line 31 in file prac5.s
   Uses
      None
Comment: codigo unused
corrder 00000298

Symbol: corrder
   Definitions
      At line 282 in file prac5.s
   Uses
      At line 277 in file prac5.s
Comment: corrder used once
corrizq 0000026C

Symbol: corrizq
   Definitions
      At line 268 in file prac5.s
   Uses
      At line 263 in file prac5.s
Comment: corrizq used once
der 0000027C

Symbol: der
   Definitions
      At line 274 in file prac5.s
   Uses
      At line 257 in file prac5.s
Comment: der used once
desact 000002B8

Symbol: desact
   Definitions
      At line 299 in file prac5.s
   Uses
      At line 81 in file prac5.s
Comment: desact used once
detChoq 00000194

Symbol: detChoq
   Definitions
      At line 186 in file prac5.s
   Uses
      At line 87 in file prac5.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: detChoq used once
escAlm 000003D0

Symbol: escAlm
   Definitions
      At line 410 in file prac5.s
   Uses
      At line 404 in file prac5.s
      At line 406 in file prac5.s

escCoch 000003E8

Symbol: escCoch
   Definitions
      At line 419 in file prac5.s
   Uses
      At line 398 in file prac5.s
Comment: escCoch used once
escTer 000001B8

Symbol: escTer
   Definitions
      At line 200 in file prac5.s
   Uses
      At line 192 in file prac5.s
Comment: escTer used once
fin 000002E8

Symbol: fin
   Definitions
      At line 314 in file prac5.s
   Uses
      At line 314 in file prac5.s
Comment: fin used once
finDet 00000188

Symbol: finDet
   Definitions
      At line 178 in file prac5.s
   Uses
      At line 96 in file prac5.s
      At line 142 in file prac5.s
      At line 151 in file prac5.s
      At line 167 in file prac5.s

incrBaj 000004CC

Symbol: incrBaj
   Definitions
      At line 506 in file prac5.s
   Uses
      At line 502 in file prac5.s
Comment: incrBaj used once
incrLU 000004AC

Symbol: incrLU
   Definitions
      At line 493 in file prac5.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 490 in file prac5.s
Comment: incrLU used once
incri 000003DC

Symbol: incri
   Definitions
      At line 414 in file prac5.s
   Uses
      At line 401 in file prac5.s
Comment: incri used once
incrind 00000210

Symbol: incrind
   Definitions
      At line 236 in file prac5.s
   Uses
      None
Comment: incrind unused
incrj 000003D4

Symbol: incrj
   Definitions
      At line 411 in file prac5.s
   Uses
      At line 408 in file prac5.s
Comment: incrj used once
inicio 00000000

Symbol: inicio
   Definitions
      At line 35 in file prac5.s
   Uses
      At line 32 in file prac5.s
Comment: inicio used once
limpUlt 0000049C

Symbol: limpUlt
   Definitions
      At line 488 in file prac5.s
   Uses
      At line 495 in file prac5.s
Comment: limpUlt used once
malMov 000001AC

Symbol: malMov
   Definitions
      At line 195 in file prac5.s
   Uses
      None
Comment: malMov unused
movercoche 00000104

Symbol: movercoche
   Definitions
      At line 135 in file prac5.s
   Uses
      At line 111 in file prac5.s
      At line 123 in file prac5.s
      At line 128 in file prac5.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 133 in file prac5.s

nochoq 00000120

Symbol: nochoq
   Definitions
      At line 145 in file prac5.s
   Uses
      At line 138 in file prac5.s
Comment: nochoq used once
noq 0000009C

Symbol: noq
   Definitions
      At line 98 in file prac5.s
   Uses
      At line 90 in file prac5.s
Comment: noq used once
recto 000002A8

Symbol: recto
   Definitions
      At line 288 in file prac5.s
   Uses
      At line 253 in file prac5.s
Comment: recto used once
sig2 000000C4

Symbol: sig2
   Definitions
      At line 113 in file prac5.s
   Uses
      At line 104 in file prac5.s
      At line 109 in file prac5.s

sig3 000000E4

Symbol: sig3
   Definitions
      At line 125 in file prac5.s
   Uses
      At line 116 in file prac5.s
      At line 121 in file prac5.s

sig4 000000F4

Symbol: sig4
   Definitions
      At line 130 in file prac5.s
   Uses
      At line 126 in file prac5.s
Comment: sig4 used once
sig5 0000013C

Symbol: sig5
   Definitions
      At line 153 in file prac5.s
   Uses
      At line 131 in file prac5.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Comment: sig5 used once
sig6 00000164

Symbol: sig6
   Definitions
      At line 166 in file prac5.s
   Uses
      At line 158 in file prac5.s
Comment: sig6 used once
yaConstruida 000002B4

Symbol: yaConstruida
   Definitions
      At line 292 in file prac5.s
   Uses
      At line 266 in file prac5.s
      At line 271 in file prac5.s
      At line 280 in file prac5.s
      At line 285 in file prac5.s

45 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

R_DAT E0010000

Symbol: R_DAT
   Definitions
      At line 8 in file prac5.s
   Uses
      At line 363 in file prac5.s
Comment: R_DAT used once
T0_IR E0004000

Symbol: T0_IR
   Definitions
      At line 9 in file prac5.s
   Uses
      At line 331 in file prac5.s
Comment: T0_IR used once
VICIntEnClr FFFFF014

Symbol: VICIntEnClr
   Definitions
      At line 4 in file prac5.s
   Uses
      At line 299 in file prac5.s
Comment: VICIntEnClr used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 3 in file prac5.s
   Uses
      At line 63 in file prac5.s
Comment: VICIntEnable used once
VICVectAddr FFFFF030

Symbol: VICVectAddr
   Definitions
      At line 6 in file prac5.s
   Uses
      At line 347 in file prac5.s
      At line 377 in file prac5.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 5 in file prac5.s
   Uses
      At line 46 in file prac5.s
      At line 304 in file prac5.s

alertsup 40007E1F

Symbol: alertsup
   Definitions
      At line 15 in file prac5.s
   Uses
      At line 102 in file prac5.s
Comment: alertsup used once
espacio2 20202020



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: espacio2
   Definitions
      At line 18 in file prac5.s
   Uses
      At line 437 in file prac5.s
Comment: espacio2 used once
finpantalla 40007FFF

Symbol: finpantalla
   Definitions
      At line 14 in file prac5.s
   Uses
      At line 113 in file prac5.s
      At line 480 in file prac5.s

iniGO 40007F0B

Symbol: iniGO
   Definitions
      At line 20 in file prac5.s
   Uses
      At line 458 in file prac5.s
Comment: iniGO used once
pantalla 40007E00

Symbol: pantalla
   Definitions
      At line 13 in file prac5.s
   Uses
      At line 72 in file prac5.s
      At line 227 in file prac5.s
      At line 436 in file prac5.s
      At line 481 in file prac5.s

seed 77777777

Symbol: seed
   Definitions
      At line 16 in file prac5.s
   Uses
      At line 39 in file prac5.s
Comment: seed used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rand 00000000

Symbol: rand
   Definitions
      At line 34 in file prac5.s
   Uses
      At line 242 in file prac5.s
Comment: rand used once
srand 00000000

Symbol: srand
   Definitions
      At line 33 in file prac5.s
   Uses
      At line 42 in file prac5.s
Comment: srand used once
2 symbols
402 symbols in table
